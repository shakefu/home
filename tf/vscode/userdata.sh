#!/bin/bash
echo "Loading userdata.sh - $0 - $*" > /tmp/userdata.log
echo "function log" >> /tmp/userdata.log
function log {
    echo "$*" | tee -a /tmp/userdata.log
}
log "    okay"
log "Logging started"

log "function cmd"
function cmd {
    local out
    local run
    run="$*"
    echo | tee -a /tmp/userdata.log
    echo "$ $run" | tee -a /tmp/userdata.log
    out=$($run 2>&1)
    [ -n "$out" ] && echo "$out" | tee -a /tmp/userdata.log
}
log "    okay"

log "function _dependencies"
function _dependencies {

    log "Updating apt"
    cmd "apt-get update -y"

    log
    log "Installing dependencies"
    cmd "apt-get install -y amazon-ec2-utils tree zsh"
}
log "    okay"

log "function _devices"
function _devices {
    log
    log "Updating udev"
    cmd "udevadm control --reload-rules"
    cmd "udevadm trigger -vw"

    log
    log "Checking devices"
    cmd "ls -lh /dev/sd*"
}
log "    okay"

# log "function _check_mkfs"
# function _check_mkfs {
#     local dev
#     dev="$1"
#     log "Checking $dev"
#     cmd "file -sL $dev"
#     fs=$(file -sL "$dev" | awk '{print $(NF)}')
#     if [[ "$fs" == "data" ]]; then
#         log "Formatting $dev"
#         cmd "mkfs -t xfs $dev"
#     else
#         log "  $dev ok"
#     fi
# }
# log "    okay"

log "function _groups"
function _groups {
    log
    log "Adding groups"
    # Group that we will use with our ssh config to force jailing ssh users
    cmd "groupadd owner"
    log
    log "Setting up sudo"
    cat > /etc/sudoers.d/80-userdata-users << EOF
# Created by userdata.sh
%owner ALL=(ALL) NOPASSWD:ALL
EOF
}
log "    okay"

log "function _users"
function _users {
    local ssh
    log
    log "Creating users"
    log
    # TODO: Template the users and SSH keys
    local users=(
        "shakefu:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDx0UVlI5bsttzG0M7okaEE6zUq+/ujWuN+yAcTYRAArJuqsvmJ5O5XsQKzYkopoFRbMPPfchFv+YrVlAwjcVsZ2Y1HumN8lysEhREDYsHGHVvC5wNE19JlDiQ7868x2XAiYw/g8NGQ0yOQEkG7uUibCeM+bg3/zb69tPHTbLX2le4ev0L3JDu35ZMp5xHMNYlfkbe3128+5f20J8FJRifwUGV3XRIlaLmL2TsCGP1oxB85zeZpn/eCOHsjXoahAbD/xdKZS+EqEYD5UAAEv4XKmhByd8hP7OT5naaDLlLgZckVW2NW8J5VJZaFaVHOMvMyZ10YnkB6MUIR8XJOu3KI4bi3zs+GU/g0W6dHILL1SXNwS1N4W78sVVJnMWIx3TlG0s6GnDc3MnxkOafx9VjFp/T/weiKZ0D36OlKKgC6JXAcCdbEp/iabO739VAoB22aVBE/QV6OUdoEbmFAbLR6s8GsLLTYFxnLvBUYBrQl+P7GvBE0OTuyfI44adkvkLc= shakefu@JakeAlheidsMBP"
    )
    for user in "${users[@]}"; do
        ssh="${user##*:}"
        user="${user%%:*}"

        log "Creating user $user"
        cmd "useradd --create-home --user-group --groups sudo,admin,owner --shell /usr/bin/zsh $user"
        cmd "touch /home/$user/.zshrc"
        cmd "mkdir -p /home/$user/.ssh"
        log "Configuring SSH"
        echo "$ssh" >> "/home/$user/.ssh/authorized_keys"
        cmd "chown -R $user:$user /home/$user"
        cmd "chmod 600 /home/$user/.ssh/authorized_keys"
        log "Adding user to ssh_config"
        cat >> /etc/ssh/sshd_config << EOF
# Generated by userdata.sh: Send $user to /mnt/$user
Match User $user
    ChrootDirectory /mnt/$user

EOF
    done

    log "Restarting ssh"
    cmd "service ssh restart"

}
log "    okay"

log "function _filesystem"
function _filesystem {
    log
    log "Mounting filesystems"
    local user
    local dev
    local mnt
    # This list is copied in from TF but should probably be templated
    local vols=(
        "shakefu:/dev/sdg1"
    )
    for vol in "${vols[@]}"; do
        user="${vol%%:*}"
        dev="${vol##*:}"

        log "Mounting user device $dev to /mnt/$user"

        cmd "stat $dev"
        if [ ! -b "$dev" ]; then
            log "$dev is not a block device, skipping"
            continue
        fi

        mnt="/mnt/$user"
        [ -d "$mnt" ] || cmd "mkdir -p $mnt"
        cmd "mount $dev $mnt"
        if [ -x "$mnt/mount.sh" ]; then
            log "Running mount script for system"
            cmd "$mnt/mount.sh"
        fi
    done
}
log "    okay"

log "function userdata"
function userdata {
    log "Initializing instance"

    _dependencies
    _devices
    _groups
    _users
    _filesystem

    log
    log "Done"
}
log "    okay"

# Invoke our main command
log "Starting..."
userdata
log "    done"

